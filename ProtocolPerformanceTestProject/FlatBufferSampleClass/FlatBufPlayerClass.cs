// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct packetFlat : IFlatbufferObject
{
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_8(); }
    public static packetFlat GetRootAspacketFlat(ByteBuffer _bb) { return GetRootAspacketFlat(_bb, new packetFlat()); }
    public static packetFlat GetRootAspacketFlat(ByteBuffer _bb, packetFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public packetFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

    public int Header { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public int Size { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public int Payload { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

    public static Offset<packetFlat> CreatepacketFlat(FlatBufferBuilder builder,
        int header = 0,
        int size = 0,
        int payload = 0)
    {
        builder.StartTable(3);
        packetFlat.AddPayload(builder, payload);
        packetFlat.AddSize(builder, size);
        packetFlat.AddHeader(builder, header);
        return packetFlat.EndpacketFlat(builder);
    }

    public static void StartpacketFlat(FlatBufferBuilder builder) { builder.StartTable(3); }
    public static void AddHeader(FlatBufferBuilder builder, int header) { builder.AddInt(0, header, 0); }
    public static void AddSize(FlatBufferBuilder builder, int size) { builder.AddInt(1, size, 0); }
    public static void AddPayload(FlatBufferBuilder builder, int payload) { builder.AddInt(2, payload, 0); }
    public static Offset<packetFlat> EndpacketFlat(FlatBufferBuilder builder)
    {
        int o = builder.EndTable();
        return new Offset<packetFlat>(o);
    }
}

public struct vectorFlat : IFlatbufferObject
{
    private Struct __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
    public vectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

    public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
    public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
    public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

    public static Offset<vectorFlat> CreatevectorFlat(FlatBufferBuilder builder, float X, float Y, float Z)
    {
        builder.Prep(4, 12);
        builder.PutFloat(Z);
        builder.PutFloat(Y);
        builder.PutFloat(X);
        return new Offset<vectorFlat>(builder.Offset);
    }
}

public struct PlayerFlatBuf : IFlatbufferObject
{
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_8(); }
    public static PlayerFlatBuf GetRootAsPlayerFlatBuf(ByteBuffer _bb) { return GetRootAsPlayerFlatBuf(_bb, new PlayerFlatBuf()); }
    public static PlayerFlatBuf GetRootAsPlayerFlatBuf(ByteBuffer _bb, PlayerFlatBuf obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public PlayerFlatBuf __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

    public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
    public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
    public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
    public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
    public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
    public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
    public int Age { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public vectorFlat? Pos { get { int o = __p.__offset(10); return o != 0 ? (vectorFlat?)(new vectorFlat()).__assign(o + __p.bb_pos, __p.bb) : null; } }

    public static void StartPlayerFlatBuf(FlatBufferBuilder builder) { builder.StartTable(4); }
    public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
    public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
    public static void AddAge(FlatBufferBuilder builder, int age) { builder.AddInt(2, age, 0); }
    public static void AddPos(FlatBufferBuilder builder, Offset<vectorFlat> posOffset) { builder.AddStruct(3, posOffset.Value, 0); }
    public static Offset<PlayerFlatBuf> EndPlayerFlatBuf(FlatBufferBuilder builder)
    {
        int o = builder.EndTable();
        return new Offset<PlayerFlatBuf>(o);
    }
}

public struct PlayerListFlat : IFlatbufferObject
{
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_8(); }
    public static PlayerListFlat GetRootAsPlayerListFlat(ByteBuffer _bb) { return GetRootAsPlayerListFlat(_bb, new PlayerListFlat()); }
    public static PlayerListFlat GetRootAsPlayerListFlat(ByteBuffer _bb, PlayerListFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public PlayerListFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

    public PlayerFlatBuf? Players(int j) { int o = __p.__offset(4); return o != 0 ? (PlayerFlatBuf?)(new PlayerFlatBuf()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
    public int PlayersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

    public static Offset<PlayerListFlat> CreatePlayerListFlat(FlatBufferBuilder builder,
        VectorOffset playersOffset = default(VectorOffset))
    {
        builder.StartTable(1);
        PlayerListFlat.AddPlayers(builder, playersOffset);
        return PlayerListFlat.EndPlayerListFlat(builder);
    }

    public static void StartPlayerListFlat(FlatBufferBuilder builder) { builder.StartTable(1); }
    public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(0, playersOffset.Value, 0); }
    public static VectorOffset CreatePlayersVector(FlatBufferBuilder builder, Offset<PlayerFlatBuf>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
    public static VectorOffset CreatePlayersVectorBlock(FlatBufferBuilder builder, Offset<PlayerFlatBuf>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
    public static VectorOffset CreatePlayersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PlayerFlatBuf>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
    public static VectorOffset CreatePlayersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PlayerFlatBuf>>(dataPtr, sizeInBytes); return builder.EndVector(); }
    public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
    public static Offset<PlayerListFlat> EndPlayerListFlat(FlatBufferBuilder builder)
    {
        int o = builder.EndTable();
        return new Offset<PlayerListFlat>(o);
    }
}